# Handles all the events

def debug(msg):
    print msg


class Event():
    """
    Superclass for any event that can be generated by an object
    and will be sent to the EventManager
    """

    def __init__(self):
        self.name = 'Generic Event'

class TickEvent(Event):
    # Frame cycle that will hold how much time since the last tick
    def __init__(self, milliseconds):
        Event.__init__(self)
        self.name = 'CPU Tick Event'
        self.time = milliseconds


class QuitEvent(Event):
    # Quit the program
    def __init__(self):
        Event.__init__(self)
        self.name = 'Program Quit Event'


# ---------------------------------------------------------------------------------------------- #


class EventManager():
    """
    Uses a WeakKeyDictionary to hold all the listeners

    Arguments:
            None

    Functions:
            register_listener       (listener)          make the instance listen
            unregister_listener     (listener)          make the listener stop listening
            post                    (event)             post the event in all listeners and use their notify method

    Attributes:
            listeners               (instance)          any class instance that has a notify method
            event_queue             (list)              order of processing the events
    """

    def __init__(self):
        from weakref import WeakKeyDictionary

        self.listeners = WeakKeyDictionary()
        self.event_queue = []

    def register_listener(self, listener):
        self.listeners[listener] = 1

    def unregister_listener(self, listener):
        if listener in self.listeners:
            del self.listeners[listener]

    def post(self, event):
        # Notify all the listeners
        # Probably gonna change this to be more efficient, since
        # not every listener will have to listen to stuff
        if not isinstance(event, TickEvent):
            debug("     Message: " + event.name)
            for listener in self.listeners:
                listener.notify(Event)
        for listener in self.listeners.keys():
            # Note: if the weakref had died, it will be
            # automatically removed, so we don't have
            # to worry about it.
            listener.notify(event)
